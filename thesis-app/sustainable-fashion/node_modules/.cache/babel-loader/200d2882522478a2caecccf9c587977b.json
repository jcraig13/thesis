{"ast":null,"code":"import HelloWorld from './components/HelloWorld.vue';\nimport CountriesStep from \"./components/CountriesStep.vue\";\nconst API_URL = \"https://api.weather.gov/gridpoints/OKX/33,37/forecast\";\nconst MAX_SVG_WIDTH = 600;\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n    CountriesStep\n  },\n\n  data() {\n    return {\n      forecast: null,\n      umbrellaOptions: [\"Rain\", \"Showers\", \"Thunderstorms\"],\n      selectedUmbrellaOption: \"Rain\",\n      bikeTempRange: [45, 80],\n      width: MAX_SVG_WIDTH\n    };\n  },\n\n  computed: {\n    periods() {\n      if (!this.forecast || !this.forecast.properties) {\n        return [];\n      }\n\n      return this.forecast.properties.periods;\n    },\n\n    firstDaytimePeriod() {\n      const daytimePeriod = this.periods.find(d => d.isDaytime);\n      return daytimePeriod || {};\n    },\n\n    bikeRecommendation() {\n      const {\n        temperature\n      } = this.firstDaytimePeriod;\n\n      if (temperature === undefined) {\n        return null;\n      }\n\n      return temperature >= this.bikeTempRange[0] && temperature < this.bikeTempRange[1];\n    },\n\n    umbrellaRecommendation() {\n      if (!this.periods.length) {\n        return false;\n      }\n\n      const nextDaytimeForecast = this.forecast.properties.periods.find(d => d.isDaytime);\n\n      if (!nextDaytimeForecast) {\n        return false;\n      }\n\n      return nextDaytimeForecast.shortForecast.includes(this.selectedUmbrellaOption);\n    }\n\n  },\n  methods: {\n    onResize() {\n      this.width = Math.min(MAX_SVG_WIDTH, window.innerWidth);\n    }\n\n  },\n\n  mounted() {\n    fetch(API_URL).then(res => res.json()).then(data => {\n      this.forecast = data;\n    });\n    window.addEventListener(\"resize\", this.onResize);\n  },\n\n  beforeUnmount() {\n    window.removeEventListener(\"resize\", this.onResize);\n  }\n\n};","map":{"version":3,"mappings":"AAMA,OAAOA,UAAP,MAAuB,6BAAvB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,MAAMC,OAAM,GAAI,uDAAhB;AACA,MAAMC,aAAY,GAAI,GAAtB;AACA,eAAe;AACbC,MAAI,EAAE,KADO;AAEbC,YAAU,EAAE;AACVL,cADU;AAEVC;AAFU,GAFC;;AAMbK,MAAI,GAAG;AACL,WAAO;AACLC,cAAQ,EAAE,IADL;AAELC,qBAAe,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,eAApB,CAFZ;AAGLC,4BAAsB,EAAE,MAHnB;AAILC,mBAAa,EAAE,CAAC,EAAD,EAAK,EAAL,CAJV;AAKLC,WAAK,EAAER;AALF,KAAP;AAOD,GAdY;;AAebS,UAAQ,EAAE;AACRC,WAAO,GAAG;AACR,UAAI,CAAC,KAAKN,QAAN,IAAkB,CAAC,KAAKA,QAAL,CAAcO,UAArC,EAAiD;AAC/C,eAAO,EAAP;AACF;;AACA,aAAO,KAAKP,QAAL,CAAcO,UAAd,CAAyBD,OAAhC;AACD,KANO;;AAORE,sBAAkB,GAAG;AACnB,YAAMC,aAAY,GAAI,KAAKH,OAAL,CAAaI,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACC,SAA3B,CAAtB;AACA,aAAOH,aAAY,IAAK,EAAxB;AACD,KAVO;;AAWRI,sBAAkB,GAAG;AACnB,YAAM;AAAEC;AAAF,UAAkB,KAAKN,kBAA7B;;AACA,UAAIM,WAAU,KAAMC,SAApB,EAA+B;AAC7B,eAAO,IAAP;AACF;;AACA,aACED,WAAU,IAAK,KAAKX,aAAL,CAAmB,CAAnB,CAAf,IACAW,WAAU,GAAI,KAAKX,aAAL,CAAmB,CAAnB,CAFhB;AAID,KApBO;;AAqBRa,0BAAsB,GAAG;AACvB,UAAI,CAAC,KAAKV,OAAL,CAAaW,MAAlB,EAA0B;AACxB,eAAO,KAAP;AACF;;AACA,YAAMC,mBAAkB,GAAI,KAAKlB,QAAL,CAAcO,UAAd,CAAyBD,OAAzB,CAAiCI,IAAjC,CACzBC,CAAD,IAAOA,CAAC,CAACC,SADiB,CAA5B;;AAGA,UAAI,CAACM,mBAAL,EAA0B;AACxB,eAAO,KAAP;AACF;;AACA,aAAOA,mBAAmB,CAACC,aAApB,CAAkCC,QAAlC,CACL,KAAKlB,sBADA,CAAP;AAGD;;AAlCO,GAfG;AAmDbmB,SAAO,EAAE;AACPC,YAAQ,GAAG;AACT,WAAKlB,KAAL,GAAamB,IAAI,CAACC,GAAL,CAAS5B,aAAT,EAAwB6B,MAAM,CAACC,UAA/B,CAAb;AACD;;AAHM,GAnDI;;AAwDbC,SAAO,GAAG;AACRC,SAAK,CAACjC,OAAD,CAAL,CACGkC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAES9B,IAAD,IAAU;AACd,WAAKC,QAAL,GAAgBD,IAAhB;AACD,KAJH;AAMA0B,UAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkC,KAAKV,QAAvC;AACD,GAhEY;;AAiEbW,eAAa,GAAG;AACdR,UAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqC,KAAKZ,QAA1C;AACD;;AAnEY,CAAf","names":["HelloWorld","CountriesStep","API_URL","MAX_SVG_WIDTH","name","components","data","forecast","umbrellaOptions","selectedUmbrellaOption","bikeTempRange","width","computed","periods","properties","firstDaytimePeriod","daytimePeriod","find","d","isDaytime","bikeRecommendation","temperature","undefined","umbrellaRecommendation","length","nextDaytimeForecast","shortForecast","includes","methods","onResize","Math","min","window","innerWidth","mounted","fetch","then","res","json","addEventListener","beforeUnmount","removeEventListener"],"sourceRoot":"","sources":["/Users/juliet/Documents/GitHub/thesis/thesis-app/sustainable-fashion/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld/>\n  <CountriesStep/>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld.vue'\nimport CountriesStep from \"./components/CountriesStep.vue\";\nconst API_URL = \"https://api.weather.gov/gridpoints/OKX/33,37/forecast\";\nconst MAX_SVG_WIDTH = 600;\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld,\n    CountriesStep,\n  },\n  data() {\n    return {\n      forecast: null,\n      umbrellaOptions: [\"Rain\", \"Showers\", \"Thunderstorms\"],\n      selectedUmbrellaOption: \"Rain\",\n      bikeTempRange: [45, 80],\n      width: MAX_SVG_WIDTH,\n    };\n  },\n  computed: {\n    periods() {\n      if (!this.forecast || !this.forecast.properties) {\n        return [];\n      }\n      return this.forecast.properties.periods;\n    },\n    firstDaytimePeriod() {\n      const daytimePeriod = this.periods.find((d) => d.isDaytime);\n      return daytimePeriod || {};\n    },\n    bikeRecommendation() {\n      const { temperature } = this.firstDaytimePeriod;\n      if (temperature === undefined) {\n        return null;\n      }\n      return (\n        temperature >= this.bikeTempRange[0] &&\n        temperature < this.bikeTempRange[1]\n      );\n    },\n    umbrellaRecommendation() {\n      if (!this.periods.length) {\n        return false;\n      }\n      const nextDaytimeForecast = this.forecast.properties.periods.find(\n        (d) => d.isDaytime\n      );\n      if (!nextDaytimeForecast) {\n        return false;\n      }\n      return nextDaytimeForecast.shortForecast.includes(\n        this.selectedUmbrellaOption\n      );\n    },\n  },\n  methods: {\n    onResize() {\n      this.width = Math.min(MAX_SVG_WIDTH, window.innerWidth);\n    },\n  },\n  mounted() {\n    fetch(API_URL)\n      .then((res) => res.json())\n      .then((data) => {\n        this.forecast = data;\n      });\n\n    window.addEventListener(\"resize\", this.onResize);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"resize\", this.onResize);\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  margin-top: 60px;\n  background-color: #FFF6E9;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}